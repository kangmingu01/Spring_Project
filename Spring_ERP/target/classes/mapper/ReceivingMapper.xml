<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.ReceivingMapper">
	
	<!-- 입고 정보 등록 -->
	<insert id="insertReceiving">
	    <selectKey resultType="int" keyProperty="receivingId" order="BEFORE">
	        select receiving_seq.nextval from dual
	    </selectKey>
	    insert into receiving values (#{receivingId}, sysdate, #{userid}, #{ordersId}, #{warehouseId}, #{quantity}, 4)
	</insert>
	
	<!-- 발주 목록 개수 조회 (페이징 처리 시 필요) -->
	<select id="selectOrdersCount" resultType="int">
	    select count(*) 
	    from orders o
	    join product p on o.product_id = p.product_id
	    join supplier s on o.supplier_id = s.supplier_id
	    join erp_user u on o.userid = u.userid
	    left join receiving r on o.orders_id = r.orders_id  <!-- receiving 테이블과 조인 -->
	    <where>
	        o.orders_status = 2 <!-- 발주 상태가 2인 항목만 필터링 -->
	        and (r.receiving_status is null or r.receiving_status not in (4, 5))  <!-- 입고 완료 및 확정된 항목 제외 -->
	        <!-- 제품명 검색 조건 -->
	        <if test="productName != null and productName != ''">
	            and product_name like '%' || #{productName} || '%'
	        </if>
	        <!-- 공급업체 검색 조건 -->
	        <if test="supplierName != null and supplierName != ''">
	            and supplier_name like '%' || #{supplierName} || '%'
	        </if>
	    </where>
	</select>
	
	<!-- 발주 목록 조회 (페이징 처리 및 검색 기능 포함) -->
	<select id="selectOrdersList" resultType="Orders">
	    select * from (
	        select rownum rn, ordersData.*
	        from (
	        	select	o.orders_id, o.orders_date, o.userid, s.supplier_name, s.supplier_id,
	               		p.product_name, p.product_id, o.orders_quantity, o.product_price, 
	               		o.delivery_date, o.orders_status, p.product_category, u.name 
		        from orders o
		        join product p on o.product_id = p.product_id
		        join supplier s on o.supplier_id = s.supplier_id
		        join erp_user u on o.userid = u.userid
		        left join receiving r on o.orders_id = r.orders_id  <!-- receiving 테이블과 조인 -->
		        <where>
		            o.orders_status = 2
		            and (r.receiving_status is null or r.receiving_status not in (4, 5))  <!-- 입고 완료 및 확정된 항목 제외 -->
		            <if test="productName != null and productName != ''">
		                and p.product_name like '%' || #{productName} || '%'
		            </if>
		            <if test="supplierName != null and supplierName != ''">
		                and s.supplier_name like '%' || #{supplierName} || '%'
		            </if>
		        </where>
		        order by o.orders_id desc
		    ) ordersData    
	    )
	    where rn between #{startRow} and #{endRow}
	</select>
	
	<!-- 창고 목록 조회 -->
    <select id="selectWarehouseList" resultType="Warehouse">
        select warehouse_id, warehouse_name from warehouse order by warehouse_name
    </select>
    	
	<!-- 특정 입고 정보 조회 (입고 ID 기준) -->
	<select id="selectReceivingById" parameterType="int" resultType="Receiving">
	    select r.receiving_id, r.receiving_date, r.orders_id, r.userid, o.product_id, p.product_name
	    	, o.supplier_id, s.supplier_name, o.orders_quantity, r.quantity, o.product_price
	    	, o.delivery_date, r.warehouse_id, w.warehouse_name, r.receiving_status
	    from receiving r 
	    join orders o on r.orders_id = o.orders_id
	    join product p on o.product_id = p.product_id
	    join supplier s on o.supplier_id = s.supplier_id
	    join warehouse w on r.warehouse_id = w.warehouse_id
	    where r.receiving_id = #{receivingId}
	</select>
	
	<!-- 입고 목록 개수 조회 (페이징 처리를 위한 전체 개수) -->
	<select id="selectReceivingCount" resultType="int">
	    select count(*)
	    from orders o
	    left join receiving r on r.orders_id = o.orders_id
	    left join product p on o.product_id = p.product_id
	    left join supplier s on o.supplier_id = s.supplier_id
	    left join erp_user u on r.userid = u.userid
	    left join warehouse w on r.warehouse_id = w.warehouse_id
	    <where>
	        (o.orders_status = 2 or r.receiving_status = 4)
	        <if test="receivingStatus != null and receivingStatus != ''">
                and r.receiving_status = #{receivingStatus}
            </if>    
	        <if test="receivingId != null and receivingId != ''">
	            and r.receiving_id = #{receivingId}
	        </if>
	        <if test="receivingDate != null and receivingDate != ''">
	            and to_char(r.receiving_date, 'YYYY-MM-DD') = #{receivingDate}
	        </if>
	        <if test="ordersId != null and ordersId != ''">
	            and o.orders_id = #{ordersId}
	        </if>
	        <if test="name != null and name != ''">
	            and u.name = #{name} 
	        </if>
	        <if test="productId != null and productId != ''">
	            and o.product_id = #{productId}
	        </if>
	        <if test="productName != null and productName != ''">
	            and p.product_name like '%' || #{productName} || '%'
	        </if>
	        <if test="brand != null and brand != ''">
	            and SUBSTR(p.product_category, 1, 2) = #{brand}
	        </if>
	        <if test="supplierId != null and supplierId != ''">
	            and o.supplier_id = #{supplierId}
	        </if>
	        <if test="deliveryDate != null and deliveryDate != ''">
			    and to_char(o.delivery_date, 'YYYY-MM-DD') = #{deliveryDate}
			</if>
	        <if test="warehouseId != null and warehouseId != ''">
	            and r.warehouse_id = #{warehouseId}
	        </if> 
         	<!-- 창고 이름으로 검색 -->
	        <if test="warehouseName != null and warehouseName != ''">
	            and w.warehouse_name like '%' || #{warehouseName} || '%'
	        </if>         
	    </where>
	</select>
	
	<!-- 입고 목록 조회 (페이징 처리 및 검색 기능 포함) -->
	<select id="selectReceivingList" resultType="Receiving">
	    select * from (
	        select rownum rn, receivingData.*
	        from (
	            select r.receiving_id, r.receiving_date, o.orders_id, r.userid, u.name,
	                   o.supplier_id, o.product_id, o.orders_quantity, o.product_price,
	                   o.delivery_date, r.receiving_status, p.product_name, p.product_category,
	                   s.supplier_name, r.quantity, r.warehouse_id, w.warehouse_name, o.orders_status
	            from orders o
	            left join receiving r on r.orders_id = o.orders_id  
	            left join product p on o.product_id = p.product_id
	            left join supplier s on o.supplier_id = s.supplier_id
	            left join erp_user u on r.userid = u.userid
	            left join warehouse w on r.warehouse_id = w.warehouse_id
	            <where>
	                (o.orders_status = 2 or r.receiving_status = 4)
	                <if test="receivingStatus != null and receivingStatus != ''">
	                    and r.receiving_status = #{receivingStatus}
	                </if>  
	                <if test="receivingId != null and receivingId != ''">
	                    and r.receiving_id = #{receivingId}
	                </if>
	                <if test="receivingDate != null and receivingDate != ''">
	                    and to_char(r.receiving_date, 'YYYY-MM-DD') = #{receivingDate}
	                </if>
	                <if test="ordersId != null and ordersId != ''">
	                    and o.orders_id = #{ordersId}
	                </if>
	                <if test="name != null and name != ''">
	                    and u.name = #{name} 
	                </if>
	                <if test="productId != null and productId != ''">
	                    and o.product_id = #{productId}
	                </if>
	                <if test="productName != null and productName != ''">
	                    and p.product_name like '%' || #{productName} || '%'
	                </if>
	                <if test="brand != null and brand != ''">
	                    and SUBSTR(p.product_category, 1, 2) = #{brand}
	                </if>
	                <if test="supplierId != null and supplierId != ''">
	                    and o.supplier_id = #{supplierId}
	                </if>
	                <if test="deliveryDate != null and deliveryDate != ''">
	                    and o.delivery_date = #{deliveryDate}
	                </if>
	                <if test="warehouseId != null and warehouseId != ''">
	                    and r.warehouse_id = #{warehouseId}
	                </if>
	                <!-- 창고 이름으로 검색 -->
			        <if test="warehouseName != null and warehouseName != ''">
			            and w.warehouse_name like '%' || #{warehouseName} || '%'
			        </if>                 
	            </where>
	            order by r.receiving_id desc  
	        ) receivingData
	    )
	    where rn between #{startRow} and #{endRow} 
	</select>

	<!-- 입고 정보 수정 (발주 대기 상태일 때) -->
	<update id="updateReceiving">
   		update receiving set receiving_status = #{receivingStatus}, quantity = #{quantity} where receiving_id = #{receivingId}
	</update>
	
	<!-- 공급 업체 이름 목록 조회 -->
    <select id="selectSupplierList" resultType="Supplier">
        select supplier_id, supplier_name from supplier order by supplier_name
    </select>
	
	<!-- 입고 완료 상태를 확정으로 변경 -->
	<update id="confirmReceiving" parameterType="int">
	    update receiving set receiving_status = 5 where receiving_id = #{receivingId} and receiving_status = 4
	</update>
	
</mapper>
